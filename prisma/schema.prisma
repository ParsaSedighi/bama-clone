generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
//  BETTER-AUTH MODELS FOR AUTHENTICATION
// ===============================================

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  Advertisement    Advertisement[]
  OwnershipHistory OwnershipHistory[]
  Transaction      Transaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ===============================================
//  MODELS FOR THE ADVERTISEMENT APPLICATION
// ===============================================

model Brand {
  id   Int    @id @default(autoincrement())
  name String @unique

  cars Car[]
}

model Car {
  id        String @id @default(cuid())
  model     String
  color     String
  condition String

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  advertisement    Advertisement?
  ownershipHistory OwnershipHistory[]
}

model Advertisement {
  id        String   @id @default(cuid())
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carId String @unique
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations to other required entities
  images       CarImage[]
  priceHistory PriceHistory[]
  transaction  Transaction?
}

model CarImage {
  id              Int           @id @default(autoincrement())
  url             String
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
}

model PriceHistory {
  id              Int           @id @default(autoincrement())
  price           Float
  recordedAt      DateTime      @default(now())
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
}

model OwnershipHistory {
  id           Int      @id @default(autoincrement())
  purchaseDate DateTime
  carId        String
  car          Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ===============================================
//  MODELS FOR THE TRANSACTION APPLICATION 
// ===============================================

enum TransactionStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

model Transaction {
  id          String            @id @default(cuid())
  agreedPrice Float
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // A transaction is linked to one Advertisement, which contains the Car and Seller info.
  advertisementId String        @unique
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  // We only need to store the Buyer, as the Seller is on the Advertisement.
  buyerId String
  buyer   User   @relation(fields: [buyerId], references: [id], onDelete: Restrict)
}
